<?xml version="1.0" encoding="UTF-8"?>
<!-- You may freely edit this file. See commented blocks below for -->
<!-- some examples of how to customize the build. -->
<!-- (If you delete it and reopen the project it will be recreated.) -->
<project name="jspool" default="default" basedir=".">
    <description>Builds, tests, and runs the project jspool.</description>
    <import file="nbproject/build-impl.xml"/>
    <!--

    There exist several targets which are by default empty and which can be 
    used for execution of your tasks. These targets are usually executed 
    before and after some main targets. They are: 

      -pre-init:                 called before initialization of project properties
      -post-init:                called after initialization of project properties
      -pre-compile:              called before javac compilation
      -post-compile:             called after javac compilation
      -pre-compile-single:       called before javac compilation of single file
      -post-compile-single:      called after javac compilation of single file
      -pre-compile-test:         called before javac compilation of JUnit tests
      -post-compile-test:        called after javac compilation of JUnit tests
      -pre-compile-test-single:  called before javac compilation of single JUnit test
      -post-compile-test-single: called after javac compilation of single JUunit test
      -pre-jar:                  called before JAR building
      -post-jar:                 called after JAR building
      -post-clean:               called after cleaning build products

    (Targets beginning with '-' are not intended to be called on their own.)

    Example of inserting an obfuscator after compilation could look like this:

        <target name="-post-compile">
            <obfuscate>
                <fileset dir="${build.classes.dir}"/>
            </obfuscate>
        </target>

    For list of available properties check the imported 
    nbproject/build-impl.xml file. 


    Another way to customize the build is by overriding existing main targets.
    The targets of interest are: 

      -init-macrodef-javac:     defines macro for javac compilation
      -init-macrodef-junit:     defines macro for junit execution
      -init-macrodef-debug:     defines macro for class debugging
      -init-macrodef-java:      defines macro for class execution
      -do-jar-with-manifest:    JAR building (if you are using a manifest)
      -do-jar-without-manifest: JAR building (if you are not using a manifest)
      run:                      execution of project 
      -javadoc-build:           Javadoc generation
      test-report:              JUnit report generation

    An example of overriding the target for project execution could look like this:

        <target name="run" depends="jspool-impl.jar">
            <exec dir="bin" executable="launcher.exe">
                <arg file="${dist.jar}"/>
            </exec>
        </target>

    Notice that the overridden target depends on the jar target and not only on 
    the compile target as the regular run target does. Again, for a list of available 
    properties which you can use, check the target you are overriding in the
    nbproject/build-impl.xml file. 

    -->

   <!-- init directory -->
    <property name="win_jre.dir" location="C:/dev/jre/windows/jre1.8.0"/>
    <property name="lin_jre.dir" location="C:/dev/jre/linux/jre1.8.0"/>
    <property name="project.dir" location="."/>

    <property name="win_base.dir" location="D:/distrib/windows"/>
    <property name="mac_base.dir" location="D:/distrib/macosx"/>
    <property name="lin_base.dir" location="D:/distrib/linux"/>

    <property name="launch4j.dir" location="C:/Program Files (x86)/launch4j"/>
    <property name="innosetup.dir" location="C:/Program Files (x86)/Inno Setup 5"/>

    <property name="checkstyle.dir" location="C:/Program Files/checkstyle-3.5"/>
    <property name="proguard.dir" location="C:/Program Files/proguard5.2.1"/>
<!--    <property name="proguard.dir" location="C:/Program Files/proguard4.7beta3"/>-->
    <property name="javahelp.dir" location="C:/Program Files/Java/jh2.0/javahelp"/>
    <property name="innoconf.dir" location="C:/dev/installer/"/>

    <property name="launch4j.config" location="C:/dev/netbeans/jspool/launch4j/config.xml"/>

    <!-- don't create the jar file, just compile -->
    <target name="jar"  depends="init,compile" />

    <!-- newjar -->
    <target name="newjar" depends="init,compile,-pre-jar,-do-jar-with-libraries,-post-jar" description="Build JAR."/>

    <target name="-pre-jar">
        <manifest file="manifest.mf">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Class-Path" value="${class-path}"/>
        </manifest>
    </target>

    <!-- convert the libraries to be included in the Class-Path attribute of the MANIFEST.MF file -->
    <pathconvert property="class-path" pathsep=" " dirsep="/">
        <path>
            <fileset dir=".">
                <include name="lib/*.jar"/>
            </fileset>
        </path>
        <map from="${basedir}${file.separator}lib" to="lib" />
    </pathconvert>

    <!-- Checkstyle description="Source Code Reformatter" -->
    <target name="checkstyle" >
        <taskdef resource="checkstyletask.properties"  classpath="${checkstyle.dir}/checkstyle-all-3.5.jar"/>
        <checkstyle config="${checkstyle.dir}/sun_checks.xml">
            <fileset dir="src/" includes="**/*.java"/>
            <formatter type="plain"/>
            <formatter type="xml" toFile="build/checkstyle_errors.xml"/>
        </checkstyle>
    </target>

   <!-- proGuard description="Launch Proguard GUI" -->
    <target name="progguardui" >
        <java fork="true" jar="${proguard.dir}/lib/proguardgui.jar" >
            <arg value="proguard/config.pro"/>
        </java>
    </target>

   <!-- proguard obfuscation description="Obfuscate jar with Proguard" -->
    <target name="proguard" >
        <mkdir dir="proguard\mappings\${prog.version}"/>
        <taskdef resource="proguard/ant/task.properties"  classpath="${proguard.dir}/lib/proguard.jar" />
        <proguard configuration="proguard/config.pro">
         -printmapping ${project.dir}\proguard\mappings\${prog.version}\mapping_${prog.name}_${build.number}.txt
        </proguard>
    </target>

    <target name="proguard.new" >
        <copy tofile="${dist.dir}/jspool_out.jar" file="${dist.dir}/jspool.jar" />
    </target>

   <!-- launch4j exe maker description="Build exe with Launch4j" -->
    <target name="launch4j"  >
        <taskdef name="launch4j" classname="net.sf.launch4j.ant.Launch4jTask"
        classpath="${launch4j.dir}/launch4j.jar:${launch4j.dir}/lib/xstream.jar" />
        <launch4j configFile="launch4j/config.xml"
         fileVersion="${prog.version}.0.${build.number}"
         txtFileVersion="${prog.version}.0.${build.number}"
         productVersion="${prog.version}.0.${build.number}"
         txtProductVersion="${prog.version}.0.${build.number}"
      />
    </target>

   <!-- innosetup install builder description="Build installer with Innosetup" -->
    <target name="innosetup" >
        <replaceregexp file="${innoconf.dir}/${prog.name}.iss"
                     match="define\s*AppVersion\s*.*"
                     replace="define AppVersion ${prog.version.str}"
                     byline="true" />

        <exec executable="${innosetup.dir}/ISCC.exe" failonerror="true">
            <arg line="${innoconf.dir}/${prog.name}.iss"/>
        </exec>
    </target>

   <!-- Help  description="Create the prog help jar" -->
    <target name="help_prog" >
        <java fork="true" jar="${javahelp.dir}/bin/jhindexer.jar" >
         <!-- arg value="-verbose"/ -->
            <arg value="-c"/>
            <arg value="versions/${prog.name}/help/${prog.locale}/config"/>
            <arg value="-db"/>
            <arg value="versions/${prog.name}/help/${prog.locale}/search"/>
            <arg value="versions/${prog.name}/help/${prog.locale}/html"/>
        </java>
        <jar destfile="lib/help.jar" basedir="versions/${prog.name}/help"/>
    </target>

   <!-- init prog distribution  -->
    <target name="prog_init" >

      <!-- set the version  -->
        <loadfile property="prog.version" srcFile="src/com/adlitteram/jspool/Version.java">
            <filterchain>
                <tokenfilter>
                    <containsregex pattern='^.*VERSION_NUM\s*=\s*"(.*)".*$' replace="\1" />
                </tokenfilter>
                <striplinebreaks/>
            </filterchain>
        </loadfile>
        <property name="prog.version.str" value='"${prog.version}"' />
        <echo>prog.version: ${prog.version} - ${prog.version.str}</echo>

      <!-- set the build number  -->
        <buildnumber file="nbproject/build.number" />
        <property name="build.number.str" value='"${build.number}"' />
        <echo>build.number ${build.number} - ${build.number.str}</echo>

        <replaceregexp file="src/com/adlitteram/jspool/Version.java"
                     match='BUILD_NUM\s*=\s*".*"'
                     replace="BUILD_NUM = ${build.number.str}" />

      <!-- purge  -->
        <delete  quiet="true" includeemptydirs="true">
            <fileset dir="src/com/adlitteram/jspool/resource/" />
            <fileset dir="src/com/adlitteram/jspool/resource/icon/" includes="*.png,*.gif,*.jpg" />
            <fileset file="src/com/adlitteram/jspool/Update.java" />
        </delete>

      <!-- copy  -->
        <copy tofile="launch4j/launch4j.ico" file="versions/${prog.name}/${prog.name}.ico" overwrite="true" />

        <copy todir="src/com/adlitteram/jspool/resource/icon/" overwrite="true" >
            <fileset dir="versions/${prog.name}/icon" />
        </copy>

        <copy todir="src/com/adlitteram/jspool/resource/" overwrite="true" >
            <fileset dir="versions/${prog.name}/resource" />
        </copy>

        <copy tofile="src/com/adlitteram/jspool/Update.java" overwrite="true" >
            <fileset file="versions/${prog.name}/Java/Update.txt" />
        </copy>

        <copy tofile="launch4j/splash.bmp" overwrite="true" >
            <fileset file="versions/${prog.name}/icon/splash.bmp" />
        </copy>

    </target>

   <!-- distrib prog distribution -->
    <target name="prog_distrib" depends="prog_init, newjar, proguard, launch4j" >

        <property name="win_dist.dir" location="${win_base.dir}/${prog.name}"/>
        <delete dir="${win_dist.dir}"/>
        <mkdir dir="${win_dist.dir}"/>

        <copy tofile="${win_dist.dir}/${prog.name}.exe" file="${dist.dir}/jspool.exe" />

        <copy todir="${win_dist.dir}" >
            <fileset file="versions/${prog.name}/*.txt" />
            <fileset file="versions/${prog.name}/*.pdf" />
        </copy>

        <copy tofile="${win_dist.dir}/jspool.jar" file="dist/jspool_out.jar" overwrite="true" />

        <copy todir="${win_dist.dir}/lib" >
            <fileset dir="lib" >
                <exclude name="**/ui.jar/" />
            </fileset>
        </copy>

        <copy todir="${win_dist.dir}/ext" >
            <fileset dir="ext" />
        </copy>

        <copy todir="${win_dist.dir}/config" >
            <fileset dir="config" />
        </copy>

        <copy todir="${win_dist.dir}/scripts" >
            <fileset dir="scripts" includes="*.js" />
        </copy>

        <copy todir="${win_dist.dir}/licenses" >
            <fileset dir="versions/${prog.name}/licenses"/>
        </copy>

        <copy todir="${win_dist.dir}/doc" failonerror="false" >
            <fileset dir="versions/${prog.name}/doc"/>
        </copy>

    </target>

   <!-- setup prog distribution  -->
    <target name="prog_setup" depends="prog_distrib" >
        <antcall target="linux_setup" />
        <antcall target="windows_setup" />
    </target>

   <!-- Linux setup -->
    <target name="linux_setup" >

        <property name="lin_dist.dir" location="${lin_base.dir}/${prog.name}"/>
        <delete dir="${lin_dist.dir}"/>
        <mkdir dir="${lin_dist.dir}"/>

        <copy verbose="true" todir="${lin_dist.dir}" includeEmptyDirs="true" >
            <fileset dir="${win_dist.dir}" >
                <exclude name="**/${prog.name}.exe"/>
                <exclude name="jre"/>
            </fileset>
        </copy>

        <copy verbose="true" todir="${lin_dist.dir}" includeEmptyDirs="true" >
            <fileset file="${win_dist.dir}/lib/jspool-boot.jar" />
        </copy>

        <copy todir="${lin_dist.dir}/jre" includeEmptyDirs="true" failonerror="false" >
            <fileset dir="${lin_jre.dir}"/>
        </copy>
        <chmod file="${lin_dist.dir}/jre/bin/java" perm="ugo+rx" failonerror="false" />

        <copy tofile="${lin_dist.dir}/${prog.name}" file="plateform/linux/jspool.bin" />
        <chmod file="${lin_dist.dir}/${prog.name}" perm="ugo+rx"/>

        <copy tofile="${lin_dist.dir}/${prog.name}.sh" file="plateform/linux/jspool.sh" />
        <chmod file="${lin_dist.dir}/${prog.name}.sh" perm="ugo+rx"/>

        <property name="lin_setup.dir" location="${lin_base.dir}/setup/"/>
        <mkdir dir="${lin_setup.dir}"/>

        <tar tarfile="${lin_setup.dir}/${prog.name}-${prog.version}-jre.tar.bz2" longfile="gnu" compression="bzip2" >
            <tarfileset dir="${lin_dist.dir}/.." includes="${prog.name}/**/*" excludes="${prog.name}/${prog.name},${prog.name}/${prog.name}.sh" />
            <tarfileset dir="${lin_dist.dir}/.." includes="${prog.name}/${prog.name},${prog.name}/${prog.name}.sh" filemode="755" />
        </tar>

    </target>

   <!-- Windows Setup  -->
    <target name="windows_setup" >

        <copy todir="${win_dist.dir}/jre" includeEmptyDirs="true" >
            <fileset dir="${win_jre.dir}"/>
        </copy>

        <delete file="${win_dist.dir}/jspool.jar" quiet="true" />

        <antcall target="innosetup" />
    </target>

   <!-- =================================================================================================== -->
   <!-- jspool -->
   <!-- =================================================================================================== -->
    <target name="jspool_init" depends="clean" >
        <property name="prog.name" value="jspool"/>
        <property name="prog.locale" value="fr"/>
        <property name="prog.help" value="true"/>
        <property name="prog.locale.list" value="**/fr/*,**/en/*"/>
        <property name="prog.url" value="http://www.exurbi.com/updates/"/>
        <echo>prog.name: ${prog.name} - prog.locale: ${prog.locale}</echo>
    </target>

    <!--target name="jspool" depends="jspool_init,prog_init,help_prog" description="jspool Init" /-->
    <target name="jspool" depends="jspool_init,prog_init" description="jspool Init" />
    <target name="jspool_distrib" depends="jspool,prog_distrib" description="jspool Distrib" />
    <target name="jspool_setup" depends="jspool_distrib,prog_setup" description="jspool Setup" />

   <!-- =================================================================================================== -->
   <!-- pSpool -->
   <!-- =================================================================================================== -->
    <target name="pspool_init" depends="clean" >
        <property name="prog.name" value="pSpool"/>
        <property name="prog.locale" value="fr"/>
        <property name="prog.help" value="true"/>
        <property name="prog.locale.list" value="**/fr/*,**/en/*"/>
        <property name="prog.url" value="http://www.exurbi.fr/updates/"/>
        <echo>prog.name: ${prog.name} - prog.locale: ${prog.locale}</echo>
    </target>

    <!--target name="pspool" depends="pspool_init,prog_init,help_prog" description="pSpool Init" /-->
    <target name="pspool" depends="pspool_init,prog_init" description="pSpool Init" />
    <target name="pspool_distrib" depends="pspool,prog_distrib" description="pSpool Distrib" />
    <target name="pspool_setup" depends="pspool_distrib,prog_setup" description="pSpool Setup" />

   <!-- =================================================================================================== -->
   <!-- all  -->
   <!-- =================================================================================================== -->
    <target name="all_setup" description="All Setup">
        <antcall target="jspool_setup" />
        <antcall target="clean" />
        <antcall target="pspool_setup" />
        <antcall target="clean" />
    </target>
</project>
