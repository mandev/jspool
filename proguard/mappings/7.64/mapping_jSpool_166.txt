com.adlitteram.jspool.Channel -> com.adlitteram.jspool.a:
    java.lang.Class[] sourceHandlers -> a
    java.lang.Class[] targetHandlers -> b
    java.util.logging.Logger logger -> a
    com.adlitteram.jspool.gui.MainFrame frame -> a
    java.lang.Thread clockThread -> a
    java.util.HashMap properties -> a
    java.util.HashMap contextMap -> b
    int status -> a
    boolean isSleeping -> a
    boolean isRunning -> b
    java.util.regex.Pattern regexp -> a
    com.adlitteram.jspool.sources.AbstractSource[] srcHandlers -> a
    com.adlitteram.jspool.targets.AbstractTarget[] trgHandlers -> a
    int progressVal -> b
    java.lang.String uploadFilename -> a
    java.lang.String downloadFilename -> b
    java.util.logging.Logger getLogger() -> a
    void logInfo(java.lang.String) -> a
    void logWarning(java.lang.String,java.lang.Throwable) -> a
    java.lang.String toString() -> toString
    java.lang.String getID() -> a
    int getStability() -> a
    boolean listSubDir() -> a
    long deleteSubDirDelay() -> a
    boolean zeroLength() -> b
    boolean autoStart() -> c
    boolean setRegexp() -> d
    java.util.regex.Pattern getRegexp() -> a
    void setStatus(int) -> a
    int getStatus() -> b
    java.lang.Object getContextValue(java.lang.String) -> a
    void setContextValue(java.lang.String,java.lang.Object) -> a
    java.util.HashMap getProperties() -> a
    void unsetProperty(java.lang.String) -> b
    void setProperty(java.lang.Object,java.lang.Object) -> a
    java.lang.String getStringProp(java.lang.Object) -> a
    java.lang.String getStringProp(java.lang.Object,java.lang.String) -> a
    boolean getBooleanProp(java.lang.Object,boolean) -> a
    int getIntProp(java.lang.Object,int) -> a
    long getLongProp(java.lang.Object,long) -> a
    java.lang.String getSrcHandlerName(int) -> a
    java.lang.String getTrgHandlerName(int) -> b
    void updateHandlers() -> e
    com.adlitteram.jspool.sources.AbstractSource getSrcHandler() -> a
    com.adlitteram.jspool.targets.AbstractTarget getTrgHandler() -> a
    java.lang.String getSourceName() -> b
    java.lang.String getTargetName() -> c
    void start() -> a
    void run() -> run
    void stop() -> b
    void disable() -> c
    void enable() -> d
    boolean isRunning() -> e
    boolean isStopped() -> f
    void update(int) -> b
    int getProgress() -> c
    java.lang.String getDownloadFilename() -> d
    java.lang.String getUploadFilename() -> e
    void setDownloadFilename(java.lang.String) -> c
    void setUploadFilename(java.lang.String) -> d
com.adlitteram.jspool.DirectHandler -> com.adlitteram.jspool.b:
    com.adlitteram.jspool.LogWriter logWriter -> a
    void publish(java.util.logging.LogRecord) -> publish
    void close() -> close
    void flush() -> flush
com.adlitteram.jspool.FilenameCleaner -> com.adlitteram.jspool.FilenameCleaner:
    java.lang.String[] CHAR_MAP -> CHAR_MAP
    java.lang.String clean(java.lang.String) -> clean
    java.lang.String clean(java.lang.String,java.lang.String[]) -> clean
com.adlitteram.jspool.FtpConnexion -> com.adlitteram.jspool.c:
    java.io.PrintWriter logWriter -> a
    com.enterprisedt.net.ftp.FTPClient client -> a
    com.adlitteram.jspool.Channel channel -> a
    java.lang.String server -> a
    java.lang.String user -> b
    java.lang.String passwd -> c
    java.lang.String homedir -> d
    com.enterprisedt.net.ftp.FTPConnectMode mode -> a
    long fileSize -> a
    com.enterprisedt.net.ftp.FTPClient getClient() -> a
    com.adlitteram.jspool.Channel getChannel() -> a
    java.lang.String getDir() -> a
    boolean isConnected() -> a
    void connect() -> a
    void chhomedir() -> b
    void close() -> c
    void createDir(java.lang.String) -> a
    void uploadFile(java.lang.String,java.lang.String,java.lang.String) -> a
    void bytesTransferred(long) -> bytesTransferred
    void setFileSize(long) -> a
    com.adlitteram.jspool.Channel access$000(com.adlitteram.jspool.FtpConnexion) -> a
    com.enterprisedt.net.ftp.FTPClient access$100(com.adlitteram.jspool.FtpConnexion) -> a
com.adlitteram.jspool.FtpConnexion$1 -> com.adlitteram.jspool.d:
    int val$progress -> a
    com.adlitteram.jspool.FtpConnexion this$0 -> a
    void run() -> run
com.adlitteram.jspool.HandlersManager -> com.adlitteram.jspool.e:
    boolean isNative -> a
    java.awt.FileDialog awtChooser -> a
    com.adlitteram.jspool.gui.DirectoryDialog swingChooser -> a
    java.io.File selectedDir -> a
    int showDialog() -> a
    java.io.File getSelectedDirectory() -> a
com.adlitteram.jspool.LogWriter -> com.adlitteram.jspool.f:
    void write(java.util.logging.LogRecord) -> a
com.adlitteram.jspool.Main -> com.adlitteram.jspool.Main:
    java.lang.String HOME_DIR -> a
    java.lang.String PROG_DIR -> f
    java.lang.String CONF_DIR -> g
    java.lang.String LANG_DIR -> b
    java.lang.String USER_CONF_DIR -> c
    java.lang.String USER_LOG_DIR -> d
    java.lang.String USER_PROP_FILE -> e
    java.util.logging.Logger logger -> a
    com.adlitteram.jspool.gui.MainFrame mainFrame -> a
    javax.swing.InputMap inputMap -> a
    javax.swing.ActionMap actionMap -> a
    void addAction(javax.swing.Action) -> a
    javax.swing.Action getAction(java.lang.String) -> a
    com.adlitteram.jspool.gui.MainFrame getMainFrame() -> a
    void quit() -> a
    void main(java.lang.String[]) -> main
    com.adlitteram.jspool.gui.MainFrame access$002(com.adlitteram.jspool.gui.MainFrame) -> a
com.adlitteram.jspool.Main$1 -> com.adlitteram.jspool.g:
    void run() -> run
com.adlitteram.jspool.ScriptUtils -> com.adlitteram.jspool.ScriptUtils:
    void unzipFileToDir(java.io.File,java.io.File) -> unzipFileToDir
    java.awt.Dimension getImageDimension(java.io.File) -> getImageDimension
    com.drew.metadata.Directory getIptcDirectory(com.drew.metadata.Metadata) -> getIptcDirectory
    com.drew.metadata.Directory getExifDirectory(com.drew.metadata.Metadata) -> getExifDirectory
com.adlitteram.jspool.Utils -> com.adlitteram.jspool.h:
    java.util.logging.Logger logger -> a
    java.net.URL file2Url(java.lang.String) -> a
    javax.swing.JMenu buildMenu(java.lang.String) -> a
    javax.swing.JButton buildButton(java.lang.String,java.lang.Object) -> a
    javax.swing.JMenuItem buildMenuItem(java.lang.String,java.lang.String,java.lang.Object) -> a
    void showError(java.lang.String) -> a
    java.lang.String cleanFTPPath(java.lang.String) -> a
    void beep() -> a
    java.lang.String getBasename(java.io.File) -> a
    java.lang.String getBasename(java.lang.String) -> b
    java.lang.String getPrefix(java.lang.String) -> c
    java.io.File getExtFile(java.io.File,java.lang.String) -> a
    void appendAndNormalize(java.lang.StringBuffer,java.lang.String) -> a
    java.lang.String capitalize(java.lang.String) -> d
    void sleep(long) -> a
com.adlitteram.jspool.XLocale -> com.adlitteram.jspool.i:
    java.util.logging.Logger logger -> a
    java.util.Comparator cmpLoc1 -> a
    java.util.Comparator cmpLoc2 -> b
    java.util.Locale uilocale -> a
    java.util.Locale getUILocale() -> a
    void setUILocale(java.util.Locale) -> a
com.adlitteram.jspool.XLocale$1 -> com.adlitteram.jspool.j:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.adlitteram.jspool.XLocale$2 -> com.adlitteram.jspool.k:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.adlitteram.jspool.XProp -> com.adlitteram.jspool.l:
    java.util.logging.Logger logger -> a
    java.util.Properties properties -> a
    java.net.URL getResource(java.lang.String) -> a
    void putProperty(java.lang.String,java.lang.String) -> b
    void put(java.lang.String,java.lang.String) -> a
    void put(java.lang.String,int) -> a
    java.lang.String get(java.lang.String) -> a
    java.lang.String getProperty(java.lang.String,java.lang.String) -> a
    java.lang.String get(java.lang.String,java.lang.String) -> b
    boolean getBoolean(java.lang.String,boolean) -> a
    int getInt(java.lang.String,int) -> a
    java.lang.String getMessage(java.lang.String) -> b
    java.lang.String getMessage(java.lang.String,java.lang.Object[]) -> a
    void loadXmlProperties(java.util.Properties,java.net.URL) -> a
    void saveProperties(java.lang.String) -> a
com.adlitteram.jspool.actions.About -> a:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.CopyChannel -> b:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.DestroyChannel -> c:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.DisableChannel -> d:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.EnableChannel -> e:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.LowerChannel -> f:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.ModifyChannel -> g:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.NewChannel -> h:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.Preferences -> i:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.Quit -> j:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.ResetLogArea -> k:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.StartAllChannels -> l:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.StartChannel -> m:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.StopAllChannels -> n:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.StopChannel -> o:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.actions.UpperChannel -> p:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.files.FtpSourceFile -> com.adlitteram.jspool.files.a:
    com.adlitteram.jspool.FtpConnexion ftpConnex -> a
    com.enterprisedt.net.ftp.FTPFile ftpFile -> a
    java.lang.String dir -> a
    long length -> a
    java.io.File tmpFile -> a
    java.lang.String getPath() -> getPath
    long getLength() -> getLength
    java.lang.String getName() -> getName
    boolean exists() -> exists
    boolean canRead() -> canRead
    boolean canWrite() -> canWrite
    boolean isDirectory() -> isDirectory
    long lastModified() -> lastModified
    boolean delete() -> delete
    boolean close() -> close
    java.io.File getFile() -> getFile
    void init(long) -> init
    void process(long) -> process
    com.adlitteram.jspool.files.SourceFile[] listFiles(java.util.regex.Pattern) -> listFiles
com.adlitteram.jspool.files.LocalFile -> com.adlitteram.jspool.files.b:
    java.io.File file -> a
    long checksum -> a
    long length -> b
    java.util.regex.Pattern regexp -> a
    boolean useChecksum -> a
    java.util.Comparator alphaSort -> a
    java.util.Comparator alphaInvSort -> b
    java.util.Comparator dateSort -> c
    java.util.Comparator dateInvSort -> d
    java.lang.String getPath() -> getPath
    java.io.File getFile() -> getFile
    long getLength() -> getLength
    long lastModified() -> lastModified
    boolean exists() -> exists
    boolean canRead() -> canRead
    boolean canWrite() -> canWrite
    java.lang.String getName() -> getName
    boolean delete() -> delete
    boolean close() -> close
    void init(long) -> init
    void process(long) -> process
    long computeChecksum() -> a
    boolean isDirectory() -> isDirectory
    com.adlitteram.jspool.files.SourceFile[] listFiles(java.util.regex.Pattern) -> listFiles
    boolean accept(java.io.File,java.lang.String) -> accept
com.adlitteram.jspool.files.LocalFile$1 -> com.adlitteram.jspool.files.c:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.adlitteram.jspool.files.LocalFile$2 -> com.adlitteram.jspool.files.d:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.adlitteram.jspool.files.LocalFile$3 -> com.adlitteram.jspool.files.e:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.adlitteram.jspool.files.LocalFile$4 -> com.adlitteram.jspool.files.f:
    int compare(java.lang.Object,java.lang.Object) -> compare
com.adlitteram.jspool.files.SourceFile -> com.adlitteram.jspool.files.SourceFile:
    int SORT_NONE -> SORT_NONE
    int sortOrder -> a
    int maxStability -> b
    int stability -> c
    void setMaxStability(int) -> setMaxStability
    boolean isStabilized() -> isStabilized
    boolean keepSortOrder() -> keepSortOrder
    void init(long) -> init
    void process(long) -> process
    java.io.File getFile() -> getFile
    java.lang.String getPath() -> getPath
    java.lang.String getName() -> getName
    long getLength() -> getLength
    boolean exists() -> exists
    boolean canRead() -> canRead
    boolean canWrite() -> canWrite
    boolean delete() -> delete
    boolean close() -> close
    boolean isDirectory() -> isDirectory
    long lastModified() -> lastModified
    com.adlitteram.jspool.files.SourceFile[] listFiles(java.util.regex.Pattern) -> listFiles
    void copyTo(java.io.File) -> copyTo
com.adlitteram.jspool.framework.KComboBox -> q:
    void setSelectedObject(java.lang.Object) -> a
    java.lang.Object getSelectedObject() -> a
com.adlitteram.jspool.framework.ObjectString -> r:
    java.lang.Object object -> a
    java.lang.String label -> a
    java.lang.String toString() -> toString
    java.lang.Object getObject() -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.adlitteram.jspool.framework.StreamFormatter -> s:
    boolean brief -> a
    boolean trunc -> b
    boolean withMethods -> c
    boolean withClasses -> d
    java.util.Date dt -> a
    java.text.SimpleDateFormat fmt -> a
    java.text.SimpleDateFormat bfmt -> b
    java.lang.String eol -> a
    void setTruncateLoggerName(boolean) -> a
    void setBrief(boolean) -> b
    void setWithMethods(boolean) -> c
    void setWithClasses(boolean) -> d
    void checkProps() -> a
    java.lang.String format(java.util.logging.LogRecord) -> format
    void access$000(com.adlitteram.jspool.framework.StreamFormatter) -> a
com.adlitteram.jspool.framework.StreamFormatter$1 -> t:
    com.adlitteram.jspool.framework.StreamFormatter this$0 -> a
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
com.adlitteram.jspool.framework.XHelp -> u:
    void updateComponentUI() -> a
com.adlitteram.jspool.framework.XLog -> v:
    com.adlitteram.jspool.framework.StreamFormatter streamFormatter -> a
    java.util.logging.ConsoleHandler consoleHandler -> a
    java.util.logging.FileHandler fileHandler -> a
    java.util.logging.Logger createLogger(java.lang.Class) -> a
com.adlitteram.jspool.framework.XLook -> w:
    java.util.logging.Logger logger -> a
    java.lang.String[] LOOKS -> a
    com.adlitteram.jspool.framework.ObjectString[] LOOK_NAMES -> a
    com.adlitteram.jspool.framework.ObjectString[] getAvailableLookAndFeelNames() -> a
    void init() -> a
    void setLookAndFeel(java.lang.String) -> a
    java.lang.String getLookAndFeel() -> a
    void setLookAndFeel(java.lang.String,boolean) -> a
com.adlitteram.jspool.framework.image.JpegInfo -> x:
    java.awt.Dimension getDimension(java.io.File) -> a
com.adlitteram.jspool.framework.utils.ExecUtils -> y:
    void exec(java.lang.String[],java.io.File,long,java.io.OutputStream) -> a
com.adlitteram.jspool.framework.utils.ExecUtils$ExecThread -> z:
    java.lang.Process process -> a
    java.lang.String[] command -> a
    java.io.File dir -> a
    com.adlitteram.jspool.framework.utils.StreamGobbler errorGobbler -> a
    com.adlitteram.jspool.framework.utils.StreamGobbler outputGobbler -> b
    java.io.OutputStream redirect -> a
    void close() -> a
    void run() -> run
com.adlitteram.jspool.framework.utils.GuiUtils -> A:
    java.util.logging.Logger logger -> a
    java.lang.String INFO -> a
    javax.swing.Icon OPEN_ICON -> a
    void centerToParent(java.awt.Component,java.awt.Component) -> a
    void saveBounds(java.awt.Component,java.lang.String) -> a
    void loadBounds(java.awt.Component,java.lang.String) -> b
    javax.swing.Icon loadIcon(java.lang.String) -> a
    java.awt.Image loadImage(java.lang.String) -> a
    void showMessage(java.lang.Object) -> a
    javax.swing.JButton createBrowseButton(java.awt.Component,javax.swing.JTextField,javax.swing.filechooser.FileFilter,java.lang.String) -> a
    javax.swing.JButton createDirButton(java.awt.Component,javax.swing.text.JTextComponent) -> a
    java.awt.Toolkit getToolkit() -> a
    void invertFocusTraversalBehaviour(javax.swing.JTextArea) -> a
com.adlitteram.jspool.framework.utils.GuiUtils$1 -> B:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.framework.utils.GuiUtils$2 -> C:
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.framework.utils.GuiUtils$TextInserter -> D:
    javax.swing.JTextArea textArea -> a
    java.lang.String insertable -> a
    void applyTabBinding(javax.swing.JTextArea) -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.framework.utils.NumUtils -> E:
    int intValue(java.lang.Object) -> a
    float floatValue(java.lang.Object) -> a
    double doubleValue(java.lang.Object) -> a
    int intValue(java.lang.Object,int) -> a
    float floatValue(java.lang.Object,float) -> a
    int clamp(int,int,int) -> a
    double[] stringToDoubleArray(java.lang.String) -> a
com.adlitteram.jspool.framework.utils.PlatformUtils -> F:
    java.lang.String HOME_DIR -> a
    java.lang.String getMacOSXProgDir() -> a
    java.lang.String appendSeparator(java.lang.String) -> a
com.adlitteram.jspool.framework.utils.StreamGobbler -> G:
    java.io.InputStream is -> a
    java.io.OutputStream os -> a
    void run() -> run
com.adlitteram.jspool.framework.utils.ZipUtils -> H:
    void unzip(java.util.zip.ZipInputStream,java.io.File) -> a
com.adlitteram.jspool.gui.AboutDialog -> I:
    java.util.logging.Logger logger -> a
    java.awt.Image img -> a
    int width -> a
    int height -> b
    java.awt.image.BufferedImage readImage() -> a
    java.awt.Image access$000() -> a
    java.awt.Image access$002(java.awt.Image) -> a
    java.awt.image.BufferedImage access$100(com.adlitteram.jspool.gui.AboutDialog) -> a
    int access$200() -> a
com.adlitteram.jspool.gui.AboutDialog$1 -> J:
    com.adlitteram.jspool.gui.AboutDialog this$0 -> a
    void paintComponent(java.awt.Graphics) -> paintComponent
com.adlitteram.jspool.gui.ChannelDialog -> K:
    java.util.logging.Logger logger -> a
    int OK -> a
    int CANCEL -> b
    com.adlitteram.jspool.Channel channel -> a
    int exit -> c
    javax.swing.JTextField identField -> a
    javax.swing.JTextField tempoField -> b
    javax.swing.JTextField stabiField -> c
    javax.swing.JTextField filterField -> d
    javax.swing.JTextField maxField -> e
    javax.swing.JTextField delSubdirField -> f
    javax.swing.JCheckBox recCheck -> a
    javax.swing.JCheckBox zeroCheck -> b
    javax.swing.JCheckBox autostartCheck -> c
    javax.swing.JPanel srcPanel -> a
    javax.swing.JPanel modePanel -> b
    javax.swing.JComboBox modeCombo -> a
    javax.swing.JComboBox srcCombo -> b
    int showDialog() -> a
    javax.swing.JPanel buildSrcPanel() -> a
    javax.swing.JPanel buildModePanel() -> b
    void OKPressed() -> a
    void cancelPressed() -> b
    javax.swing.JCheckBox access$000(com.adlitteram.jspool.gui.ChannelDialog) -> a
    javax.swing.JTextField access$100(com.adlitteram.jspool.gui.ChannelDialog) -> a
    javax.swing.JPanel access$200(com.adlitteram.jspool.gui.ChannelDialog) -> a
    javax.swing.JComboBox access$300(com.adlitteram.jspool.gui.ChannelDialog) -> a
    javax.swing.JPanel access$400(com.adlitteram.jspool.gui.ChannelDialog) -> b
    javax.swing.JComboBox access$500(com.adlitteram.jspool.gui.ChannelDialog) -> b
com.adlitteram.jspool.gui.ChannelDialog$1 -> L:
    com.adlitteram.jspool.gui.ChannelDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.ChannelDialog$2 -> M:
    com.adlitteram.jspool.gui.ChannelDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.ChannelDialog$3 -> N:
    com.adlitteram.jspool.gui.ChannelDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.ChannelDialog$4 -> O:
    com.adlitteram.jspool.gui.ChannelDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.ChannelDialog$5 -> P:
    com.adlitteram.jspool.gui.ChannelDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.ChannelModel -> Q:
    java.lang.String[] names -> a
    com.adlitteram.jspool.gui.MainFrame frame -> a
    void updateChannel(com.adlitteram.jspool.Channel) -> a
    void updateDownBar(com.adlitteram.jspool.Channel) -> b
    void updateUpBar(com.adlitteram.jspool.Channel) -> c
    int getColumnCount() -> getColumnCount
    int getRowCount() -> getRowCount
    java.lang.Object getValueAt(int,int) -> getValueAt
    java.lang.String getColumnName(int) -> getColumnName
    java.lang.Class getColumnClass(int) -> getColumnClass
    boolean isCellEditable(int,int) -> isCellEditable
    void setValueAt(java.lang.Object,int,int) -> setValueAt
com.adlitteram.jspool.gui.DirectoryChooser -> R:
    javax.swing.filechooser.FileSystemView fsv -> a
    java.io.File getSelectedDirectory() -> a
    void addActionListener(java.awt.event.ActionListener) -> a
    void valueChanged(javax.swing.event.TreeSelectionEvent) -> valueChanged
    void mousePressed(java.awt.event.MouseEvent) -> mousePressed
    void mouseReleased(java.awt.event.MouseEvent) -> mouseReleased
    void mouseClicked(java.awt.event.MouseEvent) -> mouseClicked
    void mouseEntered(java.awt.event.MouseEvent) -> mouseEntered
    void mouseExited(java.awt.event.MouseEvent) -> mouseExited
    javax.swing.tree.TreePath mkPath(java.io.File) -> a
    javax.swing.filechooser.FileSystemView access$000() -> a
com.adlitteram.jspool.gui.DirectoryChooser$1 -> S:
    javax.swing.tree.TreePath val$path -> a
    com.adlitteram.jspool.gui.DirectoryChooser this$0 -> a
    void run() -> run
com.adlitteram.jspool.gui.DirectoryChooser$DirNode -> T:
    java.io.File getDir() -> a
    int getChildCount() -> getChildCount
    java.util.Enumeration children() -> children
    boolean isLeaf() -> isLeaf
    void populateChildren() -> a
    java.lang.String toString() -> toString
    boolean equals(java.lang.Object) -> equals
com.adlitteram.jspool.gui.DirectoryDialog -> U:
    int status -> a
    java.lang.String dirname -> a
    com.adlitteram.jspool.gui.DirectoryChooser dc -> a
    javax.swing.JButton okButton -> a
    java.awt.event.ActionListener approveListener -> a
    int showDialog() -> a
    java.io.File getSelectedDirectory() -> a
    com.adlitteram.jspool.gui.DirectoryChooser access$000(com.adlitteram.jspool.gui.DirectoryDialog) -> a
    int access$102(com.adlitteram.jspool.gui.DirectoryDialog,int) -> a
    javax.swing.JButton access$200(com.adlitteram.jspool.gui.DirectoryDialog) -> a
com.adlitteram.jspool.gui.DirectoryDialog$1 -> V:
    com.adlitteram.jspool.gui.DirectoryDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.DirectoryDialog$2 -> W:
    com.adlitteram.jspool.gui.DirectoryDialog this$0 -> a
    void propertyChange(java.beans.PropertyChangeEvent) -> propertyChange
com.adlitteram.jspool.gui.DirectoryDialog$3 -> X:
    com.adlitteram.jspool.gui.DirectoryDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.DownloadBar -> Y:
    void setSelectedBlack() -> a
    java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int) -> getTableCellRendererComponent
com.adlitteram.jspool.gui.FileChooser -> Z:
    boolean isNative -> a
    java.awt.FileDialog awtChooser -> a
    javax.swing.JFileChooser swingChooser -> a
    java.awt.Component parent -> a
    int mode -> a
    java.io.File selectedFile -> a
    int showAwtDialog(int) -> a
    int showSwingDialog(int,java.lang.String) -> a
    int showOpenDialog(java.lang.String) -> a
    int showSaveDialog(java.lang.String) -> b
    java.io.File getSelectedFile() -> a
    void setFile(java.lang.String) -> a
    void addFileFilter(javax.swing.filechooser.FileFilter) -> a
    int access$000(com.adlitteram.jspool.gui.FileChooser) -> a
    javax.swing.JFileChooser access$100(com.adlitteram.jspool.gui.FileChooser) -> a
com.adlitteram.jspool.gui.FileChooser$1 -> aa:
    com.adlitteram.jspool.gui.FileChooser this$0 -> a
    void approveSelection() -> approveSelection
com.adlitteram.jspool.gui.FileChooser$2 -> ab:
    javax.swing.filechooser.FileFilter val$ff -> a
    boolean accept(java.io.File,java.lang.String) -> accept
com.adlitteram.jspool.gui.LogArea -> ac:
    org.apache.commons.lang.time.FastDateFormat format -> a
    int maxLogSize -> a
    void write(java.util.logging.LogRecord) -> a
    int access$000(com.adlitteram.jspool.gui.LogArea) -> a
com.adlitteram.jspool.gui.LogArea$LogDocument -> ad:
    com.adlitteram.jspool.gui.LogArea this$0 -> a
    void insertString(int,java.lang.String,javax.swing.text.AttributeSet) -> insertString
com.adlitteram.jspool.gui.LogContent -> ae:
    char[] empty -> a
    javax.swing.undo.UndoableEdit insertString(int,java.lang.String) -> insertString
    javax.swing.undo.UndoableEdit remove(int,int) -> remove
com.adlitteram.jspool.gui.MainFrame -> af:
    java.util.logging.Logger logger -> a
    java.lang.String[] statusArray -> a
    com.adlitteram.jspool.gui.MainFrame thisFrame -> a
    com.jidesoft.swing.JideSplitPane splitPane -> a
    com.jidesoft.swing.JideTabbedPane logPane -> a
    com.adlitteram.jspool.gui.LogArea allLogArea -> a
    javax.swing.JTable tableView -> a
    java.util.ArrayList channelList -> a
    com.adlitteram.jspool.gui.ChannelModel channelModel -> a
    int lastSelectedRow -> a
    void saveProperties() -> a
    void loadConfig() -> d
    void resetLogArea() -> b
    void addLogArea(com.adlitteram.jspool.Channel) -> a
    void setLogTitle(com.adlitteram.jspool.Channel) -> b
    void removeLogArea(com.adlitteram.jspool.Channel) -> c
    java.util.ArrayList getChannels() -> a
    void saveConfig() -> c
    java.util.ArrayList access$000(com.adlitteram.jspool.gui.MainFrame) -> a
    com.adlitteram.jspool.gui.MainFrame access$100(com.adlitteram.jspool.gui.MainFrame) -> a
com.adlitteram.jspool.gui.MainFrame$1 -> ag:
    com.adlitteram.jspool.gui.MainFrame this$0 -> a
    void valueChanged(javax.swing.event.ListSelectionEvent) -> valueChanged
com.adlitteram.jspool.gui.MainFrame$2 -> ah:
    com.adlitteram.jspool.gui.MainFrame this$0 -> a
    void windowClosing(java.awt.event.WindowEvent) -> windowClosing
com.adlitteram.jspool.gui.PrefDialog -> ai:
    com.adlitteram.jspool.framework.KComboBox lookCombo -> a
    javax.swing.JRadioButton enButton -> a
    javax.swing.JRadioButton frButton -> b
    javax.swing.JCheckBox useJDBCLogCheck -> a
    javax.swing.JTextField driverField -> a
    javax.swing.JTextField urlField -> b
    javax.swing.JTextField userField -> c
    javax.swing.JPasswordField passwordField -> a
    javax.swing.JRadioButton access$000(com.adlitteram.jspool.gui.PrefDialog) -> a
    javax.swing.JCheckBox access$100(com.adlitteram.jspool.gui.PrefDialog) -> a
    javax.swing.JTextField access$200(com.adlitteram.jspool.gui.PrefDialog) -> a
    javax.swing.JTextField access$300(com.adlitteram.jspool.gui.PrefDialog) -> b
    javax.swing.JTextField access$400(com.adlitteram.jspool.gui.PrefDialog) -> c
    javax.swing.JPasswordField access$500(com.adlitteram.jspool.gui.PrefDialog) -> a
    com.adlitteram.jspool.framework.KComboBox access$600(com.adlitteram.jspool.gui.PrefDialog) -> a
com.adlitteram.jspool.gui.PrefDialog$1 -> aj:
    com.adlitteram.jspool.gui.PrefDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.PrefDialog$2 -> ak:
    com.adlitteram.jspool.gui.PrefDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.PrefDialog$3 -> al:
    com.adlitteram.jspool.gui.PrefDialog this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.gui.UploadBar -> am:
    void setSelectedBlack() -> a
    java.awt.Component getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int) -> getTableCellRendererComponent
com.adlitteram.jspool.listeners.AbstractDisposer -> an:
    java.awt.Window parent -> a
    void keyPressed(java.awt.event.KeyEvent) -> keyPressed
com.adlitteram.jspool.pdf.Counter -> ao:
    java.lang.String HOME_DIR -> a
    java.lang.String PROG_DIR -> b
    java.lang.String USER_DIR1 -> c
    java.lang.String USER_DIR2 -> d
    java.lang.String USER_FILE1 -> e
    java.lang.String USER_FILE2 -> f
    int number -> a
    int next() -> a
    void load(java.lang.String) -> a
    void save(java.lang.String) -> b
com.adlitteram.jspool.pdf.PdfBuilder -> ap:
    java.util.logging.Logger logger -> a
    int[] alignArray -> a
    com.adlitteram.jspool.Channel channel -> a
    java.io.File inputFile -> a
    java.io.File outputFile -> b
    java.io.File cnfDir -> c
    java.io.File errorDir -> d
    com.drew.metadata.Directory iptcDirectory -> a
    java.util.Properties properties -> a
    java.util.zip.ZipFile zfile -> a
    java.util.ArrayList imageList -> a
    java.util.ArrayList textList -> b
    int quantity -> a
    java.lang.String reference -> a
    java.lang.String source -> b
    java.lang.String category -> c
    java.lang.String address -> d
    java.lang.String note -> e
    java.lang.String odate -> f
    java.lang.String order -> g
    com.lowagie.text.pdf.PdfReader bgReader -> a
    com.lowagie.text.pdf.PdfStamper bgStamper -> a
    com.lowagie.text.pdf.PdfReader covReader -> b
    com.lowagie.text.pdf.PdfReader horReader -> c
    com.lowagie.text.pdf.PdfReader verReader -> d
    boolean build(java.lang.String,java.lang.String,java.lang.String) -> a
    int getOffset(java.lang.String) -> a
    void readZipFile() -> a
    void addText(com.lowagie.text.pdf.PdfContentByte,java.lang.String) -> a
    void extractText() -> b
    java.io.File getTempJpegFile(int) -> a
    java.lang.String rename(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String replaceText(java.lang.String) -> a
com.adlitteram.jspool.pdf.PdfDecryptor -> aq:
    java.util.logging.Logger logger -> a
    byte[] ownerPassword -> a
    byte[] ownerPassword2 -> b
    boolean decrypt(java.lang.String,java.lang.String,java.lang.String) -> a
    boolean setInfoMap(java.lang.String,java.lang.String,java.lang.String) -> b
    boolean recrypt(java.lang.String,java.lang.String,java.lang.String) -> c
com.adlitteram.jspool.pdf.PdfMerger -> ar:
    int[] alignArray -> a
    java.lang.String outname -> a
    org.w3c.dom.Document document -> a
    javax.xml.xpath.XPath xpath -> a
    com.lowagie.text.pdf.PdfReader bgReader -> a
    com.lowagie.text.pdf.PdfStamper stamper -> a
    int merge(java.lang.String,java.lang.String,java.lang.String) -> a
    void init(java.util.HashMap) -> a
    java.lang.String getXPathValue(java.util.HashMap) -> a
    void setText(java.util.HashMap) -> b
    java.lang.String processText(java.lang.String,java.lang.String) -> a
    void setImage(java.util.HashMap) -> c
    void setPdf(java.util.HashMap) -> d
com.adlitteram.jspool.pdf.PdfTransformer -> as:
    java.util.logging.Logger logger -> a
    com.adlitteram.jspool.Channel channel -> a
    com.lowagie.text.pdf.PdfReader reader -> a
    java.util.HashMap infoMap -> a
    java.util.Properties properties -> a
    java.io.File outputDir -> a
    java.io.File inputFile -> b
    java.lang.String outputName -> a
    java.lang.String barCodText -> b
    double price -> a
    double totalPrice -> b
    double extraPrice -> c
    double extraTotalPrice -> d
    double redPrice -> e
    double redTotalPrice -> f
    double redExtraPrice -> g
    double redExtraTotalPrice -> h
    boolean isCoveredExtracted -> a
    int page -> a
    boolean transform(java.lang.String,java.lang.String,java.lang.String) -> a
    void saveTxtDescription() -> a
    void addHeaders(com.lowagie.text.Document) -> a
    void extractPages(boolean,double,double,double) -> a
    void addIndexPage(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.Document,double,double,double) -> a
    void addTrailerPage(com.lowagie.text.pdf.PdfWriter,com.lowagie.text.Document,double,double,double) -> b
    void centerTemplate(com.lowagie.text.pdf.PdfTemplate,com.lowagie.text.pdf.PdfImportedPage,java.awt.geom.AffineTransform) -> a
    void showLogo(com.lowagie.text.pdf.PdfTemplate,java.lang.String,double,double,double) -> a
    void showBarcode(com.lowagie.text.pdf.PdfTemplate,double,double,double) -> a
    void showTextIndex(com.lowagie.text.pdf.PdfTemplate) -> a
    java.lang.String getPdfMetaData(java.lang.String) -> a
    java.lang.String getBarCodeText() -> a
    java.lang.String rename(java.lang.String,java.lang.String,java.lang.String) -> a
com.adlitteram.jspool.pdf.PdfUtils -> at:
    java.util.logging.Logger logger -> a
    void recrypt(java.io.File,java.io.File,byte[]) -> a
    void addInfo(java.io.File,java.io.File,java.util.HashMap) -> a
    void decrypt(java.io.File,java.io.File,byte[]) -> b
com.adlitteram.jspool.pdf.Unzipper -> au:
    java.util.logging.Logger logger -> a
    boolean unzip(java.lang.String,java.lang.String,java.lang.String) -> a
    void doError(java.io.File,java.io.File) -> a
com.adlitteram.jspool.properties.XmlChannelHandler -> av:
    java.util.logging.Logger logger -> a
    java.util.HashMap props -> a
    com.adlitteram.jspool.gui.MainFrame frame -> a
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
    java.lang.String getLocationString(org.xml.sax.SAXParseException) -> a
com.adlitteram.jspool.properties.XmlChannelReader -> aw:
    java.util.logging.Logger logger -> a
    boolean read(com.adlitteram.jspool.gui.MainFrame,java.net.URL) -> a
    boolean read(com.adlitteram.jspool.gui.MainFrame,java.lang.String) -> a
com.adlitteram.jspool.properties.XmlMergerHandler -> ax:
    java.util.logging.Logger logger -> a
    com.adlitteram.jspool.pdf.PdfMerger pdfMerger -> a
    java.util.HashMap initProps -> a
    java.util.HashMap textProps -> b
    java.util.HashMap imageProps -> c
    java.util.HashMap pdfProps -> d
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    java.util.HashMap getAttributes(org.xml.sax.Attributes,java.util.HashMap) -> a
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
    java.lang.String getLocationString(org.xml.sax.SAXParseException) -> a
com.adlitteram.jspool.properties.XmlMergerReader -> ay:
    java.util.logging.Logger logger -> a
    boolean read(com.adlitteram.jspool.pdf.PdfMerger,java.lang.String) -> a
com.adlitteram.jspool.properties.XmlPropertiesHandler -> az:
    java.util.Properties props -> a
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
    java.lang.String getLocationString(org.xml.sax.SAXParseException) -> a
com.adlitteram.jspool.properties.XmlPropertiesReader -> aA:
    boolean read(java.util.Properties,java.lang.String) -> a
com.adlitteram.jspool.sources.AbstractSource -> com.adlitteram.jspool.sources.AbstractSource:
    com.adlitteram.jspool.Channel channel -> a
    java.util.HashMap fileMap -> a
    java.util.HashMap propertyMap -> b
    void init(com.adlitteram.jspool.Channel) -> init
    com.adlitteram.jspool.Channel getChannel() -> getChannel
    void close() -> close
    java.lang.String getRelease() -> getRelease
    java.lang.String getAuthor() -> getAuthor
    void setProperty(java.lang.String,java.lang.Object) -> setProperty
    java.lang.Object getProperty(java.lang.String) -> getProperty
    boolean setParameters() -> setParameters
    javax.swing.JPanel buildPanel() -> buildPanel
    java.lang.String getName() -> getName
    boolean run(com.adlitteram.jspool.targets.AbstractTarget) -> run
    boolean processDir(java.lang.String,com.adlitteram.jspool.files.SourceFile,com.adlitteram.jspool.targets.AbstractTarget) -> processDir
com.adlitteram.jspool.sources.FtpSource -> com.adlitteram.jspool.sources.a:
    java.lang.String[] modeArray -> a
    javax.swing.JTextField serverField -> a
    javax.swing.JTextField userField -> b
    javax.swing.JTextField dirField -> c
    javax.swing.JPasswordField passwdField -> a
    javax.swing.JComboBox modeCombo -> a
    com.adlitteram.jspool.FtpConnexion ftpConnex -> a
    java.lang.String getName() -> getName
    void close() -> close
    boolean run(com.adlitteram.jspool.targets.AbstractTarget) -> run
    javax.swing.JPanel buildPanel() -> buildPanel
    boolean setParameters() -> setParameters
com.adlitteram.jspool.sources.LocalDir -> com.adlitteram.jspool.sources.b:
    java.lang.String[] sortArray -> a
    javax.swing.JTextField sourceField -> a
    javax.swing.JCheckBox checksumCheck -> a
    javax.swing.JComboBox sortCombo -> a
    java.lang.String getName() -> getName
    boolean run(com.adlitteram.jspool.targets.AbstractTarget) -> run
    javax.swing.JPanel buildPanel() -> buildPanel
    boolean setParameters() -> setParameters
com.adlitteram.jspool.sources.LocalScript -> com.adlitteram.jspool.sources.LocalScript:
    java.lang.String SCRIPTSOURCE_PATH -> SCRIPTSOURCE_PATH
    int OK -> OK
    int FAIL -> FAIL
    int NOP -> NOP
    com.adlitteram.jspool.targets.Shell shell -> a
    org.mozilla.javascript.Script script -> a
    javax.swing.JTextField execField -> a
    java.lang.String toString() -> toString
    java.lang.String getName() -> getName
    void close() -> close
    boolean run(com.adlitteram.jspool.targets.AbstractTarget) -> run
    java.lang.Object[] runScript() -> runScript
    java.lang.Object convertFromJS(java.lang.String,java.lang.Class,org.mozilla.javascript.Context,com.adlitteram.jspool.targets.Shell) -> a
    org.mozilla.javascript.Script compile(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> a
    javax.swing.JPanel buildPanel() -> buildPanel
    boolean setParameters() -> setParameters
    void exec(java.lang.String,java.lang.String) -> exec
    javax.swing.JTextField access$000(com.adlitteram.jspool.sources.LocalScript) -> a
com.adlitteram.jspool.sources.LocalScript$1 -> com.adlitteram.jspool.sources.c:
    com.adlitteram.jspool.sources.LocalScript this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.targets.AbstractTarget -> com.adlitteram.jspool.targets.a:
    com.adlitteram.jspool.Channel channel -> a
    void init(com.adlitteram.jspool.Channel) -> a
    void close() -> a
    boolean setParameters() -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
com.adlitteram.jspool.targets.FtpMove -> com.adlitteram.jspool.targets.b:
    java.lang.String[] modeArray -> a
    javax.swing.JTextField serverField -> a
    javax.swing.JTextField userField -> b
    javax.swing.JPasswordField passwdField -> a
    javax.swing.JTextField dirField -> c
    javax.swing.JTextField extField -> d
    javax.swing.JComboBox modeCombo -> a
    javax.swing.JCheckBox subDirCheck -> a
    javax.swing.JCheckBox cleanCharCheck -> b
    javax.swing.JCheckBox cleanSpaceCheck -> c
    javax.swing.JTextField replaceField -> e
    javax.swing.JTextField destinationField -> f
    com.adlitteram.jspool.FtpConnexion ftpConnex -> a
    java.lang.String getName() -> a
    void close() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    void sendToFtp(com.adlitteram.jspool.FtpConnexion,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.LocalExec -> com.adlitteram.jspool.targets.c:
    javax.swing.JTextField execField -> a
    javax.swing.JTextField param1Field -> b
    javax.swing.JTextField param2Field -> c
    javax.swing.JCheckBox syncCheck -> a
    javax.swing.JCheckBox removeCheck -> b
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    java.lang.String replace(java.lang.String,java.io.File) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.LocalMove -> com.adlitteram.jspool.targets.d:
    javax.swing.JTextArea targetArea -> a
    javax.swing.JCheckBox subDirCheck -> a
    javax.swing.JCheckBox renameCheck -> b
    javax.swing.JTextField srcRenameField -> a
    javax.swing.JTextField trgRenameField -> b
    javax.swing.JLabel srcRenameLabel -> a
    javax.swing.JLabel trgRenameLabel -> b
    java.util.regex.Pattern pattern -> a
    javax.swing.JCheckBox cleanCharCheck -> c
    javax.swing.JCheckBox cleanSpaceCheck -> d
    javax.swing.JTextField replaceField -> c
    javax.swing.JTextField destinationField -> d
    java.lang.String getName() -> a
    void init(com.adlitteram.jspool.Channel) -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    boolean doCopy(java.lang.String,com.adlitteram.jspool.files.SourceFile,java.io.File,java.lang.String) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    void setEnabledRename(boolean) -> a
    boolean setParameters() -> a
    java.lang.String rename(java.util.regex.Pattern,java.lang.String,java.lang.String) -> a
    javax.swing.JCheckBox access$000(com.adlitteram.jspool.targets.LocalMove) -> a
    void access$100(com.adlitteram.jspool.targets.LocalMove,boolean) -> a
com.adlitteram.jspool.targets.LocalMove$1 -> com.adlitteram.jspool.targets.e:
    com.adlitteram.jspool.targets.LocalMove this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.targets.MailSend -> com.adlitteram.jspool.targets.f:
    javax.swing.JTextField serverField -> a
    javax.swing.JTextField userField -> b
    javax.swing.JPasswordField passwdField -> a
    javax.swing.JTextField toUser1Field -> c
    javax.swing.JTextField fromUserField -> d
    javax.swing.JTextField subjectField -> e
    javax.swing.JTextField messageField -> f
    java.lang.String getName() -> a
    void close() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.PdfAddInfo -> com.adlitteram.jspool.targets.g:
    javax.swing.JTextField target1Field -> a
    javax.swing.JTextField target2Field -> b
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.PdfBuild -> com.adlitteram.jspool.targets.h:
    javax.swing.JTextField target1Field -> a
    javax.swing.JTextField target2Field -> b
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.PdfDecrypt -> com.adlitteram.jspool.targets.i:
    javax.swing.JTextField target1Field -> a
    javax.swing.JTextField target2Field -> b
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.PdfMerge -> com.adlitteram.jspool.targets.j:
    javax.swing.JTextField confField -> a
    javax.swing.JTextField outputField -> b
    javax.swing.JTextField errorField -> c
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.PdfRecrypt -> com.adlitteram.jspool.targets.k:
    javax.swing.JTextField target1Field -> a
    javax.swing.JTextField target2Field -> b
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.PdfTransform -> com.adlitteram.jspool.targets.l:
    javax.swing.JTextField target1Field -> a
    javax.swing.JTextField target2Field -> b
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.Purge -> com.adlitteram.jspool.targets.m:
    javax.swing.JTextField dayField -> a
    javax.swing.JTextField hourField -> b
    javax.swing.JTextField minField -> c
    javax.swing.JTextField secField -> d
    javax.swing.JTextField sizeField -> e
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.targets.ScriptExec -> com.adlitteram.jspool.targets.n:
    javax.swing.JTextField execField -> a
    com.adlitteram.jspool.targets.Shell shell -> a
    org.mozilla.javascript.Script script -> a
    java.lang.String getName() -> a
    void close() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    org.mozilla.javascript.Script compile(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.String) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
    javax.swing.JTextField access$000(com.adlitteram.jspool.targets.ScriptExec) -> a
com.adlitteram.jspool.targets.ScriptExec$1 -> com.adlitteram.jspool.targets.o:
    com.adlitteram.jspool.targets.ScriptExec this$0 -> a
    void actionPerformed(java.awt.event.ActionEvent) -> actionPerformed
com.adlitteram.jspool.targets.Shell -> com.adlitteram.jspool.targets.Shell:
    com.adlitteram.jspool.Channel channel -> a
    java.lang.Object _getValue(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.Function) -> _getValue
    void _setValue(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.Function) -> _setValue
    void _print(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.Function) -> _print
    void _execFor(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.Function) -> _execFor
    void _exec2(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.Function) -> _exec2
    void _exec(org.mozilla.javascript.Context,org.mozilla.javascript.Scriptable,java.lang.Object[],org.mozilla.javascript.Function) -> _exec
com.adlitteram.jspool.targets.Unzip -> com.adlitteram.jspool.targets.p:
    javax.swing.JTextField target1Field -> a
    java.lang.String getName() -> a
    int run(java.lang.String,com.adlitteram.jspool.files.SourceFile) -> a
    javax.swing.JPanel buildPanel$6ccceedb() -> a
    boolean setParameters() -> a
com.adlitteram.jspool.xml.XPropertiesHandler -> aB:
    java.util.logging.Logger logger -> a
    java.util.Properties props -> a
    java.lang.StringBuffer buffer -> a
    java.lang.String key -> a
    java.lang.String prefix -> b
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void characters(char[],int,int) -> characters
    void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    void warning(org.xml.sax.SAXParseException) -> warning
    void error(org.xml.sax.SAXParseException) -> error
    void fatalError(org.xml.sax.SAXParseException) -> fatalError
    java.lang.String getLocationString(org.xml.sax.SAXParseException) -> a
com.adlitteram.jspool.xml.XPropertiesReader -> aC:
    java.util.logging.Logger logger -> a
    boolean read(java.util.Properties,java.lang.String,java.net.URL) -> a
    boolean read(java.util.Properties,java.lang.String,org.xml.sax.InputSource) -> a
com.adlitteram.pdftool.Dimension -> com.adlitteram.pdftool.Dimension:
com.adlitteram.pdftool.Dimension$Double -> com.adlitteram.pdftool.Dimension$Double:
    double width -> width
    double height -> height
    double getWidth() -> getWidth
    double getHeight() -> getHeight
    java.lang.String toString() -> toString
com.adlitteram.pdftool.Dimension$Float -> com.adlitteram.pdftool.Dimension$Float:
    float width -> width
    float height -> height
    float getWidth() -> getWidth
    float getHeight() -> getHeight
    java.lang.String toString() -> toString
com.adlitteram.pdftool.Main -> com.adlitteram.pdftool.Main:
    void main(java.lang.String[]) -> main
    void test0() -> test0
    void test1() -> test1
    void test2() -> test2
com.adlitteram.pdftool.PdfExtractor -> com.adlitteram.pdftool.PdfExtractor:
    com.adlitteram.pdftool.PdfInfo getPdfInfo(java.io.File) -> getPdfInfo
    com.adlitteram.pdftool.PdfInfo getPdfInfo(java.io.File,java.lang.String) -> getPdfInfo
    com.adlitteram.pdftool.Dimension$Float getPageSize(java.io.File,int) -> getPageSize
com.adlitteram.pdftool.PdfInfo -> com.adlitteram.pdftool.PdfInfo:
    java.lang.String PDF_VERSION -> PDF_VERSION
    java.lang.String PAGE_COUNT -> PAGE_COUNT
    java.lang.String OBJECT_COUNT -> OBJECT_COUNT
    java.lang.String FILE_LENGTH -> FILE_LENGTH
    java.lang.String IS_ENCRYPTED -> IS_ENCRYPTED
    java.lang.String PERMISSIONS -> PERMISSIONS
    java.lang.String IS_128BITS -> IS_128BITS
    java.lang.String IS_REBUILT -> IS_REBUILT
    java.lang.String META_KEY -> META_KEY
    java.util.Properties properties -> properties
    byte[] xmlMetadata -> xmlMetadata
    java.lang.String getPdfVersion() -> getPdfVersion
    int getNumberOfPages() -> getNumberOfPages
    int getXrefSize() -> getXrefSize
    long getFileLength() -> getFileLength
    boolean isEncrypted() -> isEncrypted
    boolean is128bits() -> is128bits
    boolean isRebuilt() -> isRebuilt
    java.lang.String getPermissions() -> getPermissions
    java.lang.String getMetadata(java.lang.String) -> getMetadata
    java.util.Set getEntrySet() -> getEntrySet
    byte[] getXmlMetadata() -> getXmlMetadata
com.adlitteram.pdftool.filters.AbstractPdfFilter -> com.adlitteram.pdftool.filters.AbstractPdfFilter:
    boolean deleteSource -> deleteSource
    java.io.File[] filter(java.io.File[]) -> filter
    java.io.File[] filter(java.io.File) -> filter
    boolean isDeleteSource() -> isDeleteSource
    void setDeleteSource(boolean) -> setDeleteSource
    java.io.File getOutputFile(java.lang.String,java.io.File) -> getOutputFile
    java.io.File getOutputFile(java.lang.String,java.io.File,java.lang.String) -> getOutputFile
    java.io.File getTmpFile(java.io.File,java.io.File) -> getTmpFile
    void moveFile(java.io.File,java.io.File) -> moveFile
com.adlitteram.pdftool.filters.AddMargin -> com.adlitteram.pdftool.filters.AddMargin:
    java.lang.String destination -> destination
    float left -> left
    float top -> top
    float bottom -> bottom
    float right -> right
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.AddMetadata -> com.adlitteram.pdftool.filters.AddMetadata:
    java.lang.String destination -> destination
    java.util.ArrayList metadatas -> metadatas
    void addMetadata(java.lang.String,java.lang.String) -> addMetadata
    java.lang.Object removeMetadata(java.lang.String,java.lang.String) -> removeMetadata
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.Concat -> com.adlitteram.pdftool.filters.Concat:
    java.lang.String destination -> destination
    java.io.File[] filter(java.io.File) -> filter
    java.io.File[] filter(java.io.File[]) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.Copy -> com.adlitteram.pdftool.filters.Copy:
    java.lang.String destination -> destination
    int count -> count
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.CropMargin -> com.adlitteram.pdftool.filters.CropMargin:
    java.lang.String destination -> destination
    float left -> left
    float top -> top
    float bottom -> bottom
    float right -> right
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.CropMark -> com.adlitteram.pdftool.filters.CropMark:
    java.lang.String destination -> destination
    java.util.ArrayList marks -> marks
    void addLineMark(com.adlitteram.pdftool.filters.LineMark) -> addLineMark
    boolean removeLineMark(com.adlitteram.pdftool.filters.LineMark) -> removeLineMark
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.Decrypt -> com.adlitteram.pdftool.filters.Decrypt:
    java.lang.String destination -> destination
    java.lang.String ownerPasswd -> ownerPasswd
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.DuplicatePage -> com.adlitteram.pdftool.filters.DuplicatePage:
    java.lang.String destination -> destination
    int count -> count
    java.lang.String pattern -> pattern
    java.io.File[] filter(java.io.File) -> filter
    java.util.List getSelectedList(int) -> getSelectedList
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.Encrypt -> com.adlitteram.pdftool.filters.Encrypt:
    java.lang.String destination -> destination
    java.lang.String ownerPasswd -> ownerPasswd
    java.lang.String userPasswd -> userPasswd
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.GroupFilter -> com.adlitteram.pdftool.filters.GroupFilter:
    java.util.ArrayList filters -> filters
    int count -> count
    void reset() -> reset
    void addFilter(com.adlitteram.pdftool.filters.PdfFilter) -> addFilter
    boolean removeFilter(com.adlitteram.pdftool.filters.PdfFilter) -> removeFilter
    java.io.File[] filter(java.io.File[]) -> filter
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.Impose -> com.adlitteram.pdftool.filters.Impose:
    int SIMPLE -> SIMPLE
    int PAIRED -> PAIRED
    int DIVIDE -> DIVIDE
    java.lang.String destination -> destination
    float width -> width
    float height -> height
    int type -> type
    java.util.ArrayList pageSlots -> pageSlots
    java.util.ArrayList pageMarks -> pageMarks
    void addPageSlot(com.adlitteram.pdftool.filters.PageSlot) -> addPageSlot
    boolean removePageSlot(com.adlitteram.pdftool.filters.PageSlot) -> removePageSlot
    void addPageMark(com.adlitteram.pdftool.filters.PageMark) -> addPageMark
    boolean removePageMark(com.adlitteram.pdftool.filters.PageMark) -> removePageMark
    java.util.ArrayList getSelectedPages(int) -> getSelectedPages
    java.io.File[] filter(java.io.File) -> filter
    java.io.File[] filter(java.io.File[]) -> filter
    void addPage(com.lowagie.text.pdf.PdfContentByte,int,com.lowagie.text.pdf.PdfImportedPage,com.adlitteram.pdftool.filters.PageSlot) -> addPage
    void addText(com.lowagie.text.pdf.PdfContentByte,com.lowagie.text.pdf.BaseFont,int,java.util.Map,java.io.File,com.adlitteram.pdftool.filters.PageSlot) -> addText
    void addMark(com.lowagie.text.pdf.PdfContentByte,com.lowagie.text.pdf.PdfImportedPage,int) -> addMark
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.InsertPage -> com.adlitteram.pdftool.filters.InsertPage:
    int FIRST_PAGE -> FIRST_PAGE
    int LAST_PAGE -> LAST_PAGE
    java.lang.String destination -> destination
    int pageCount -> pageCount
    int insertBefore -> insertBefore
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.LineMark -> com.adlitteram.pdftool.filters.LineMark:
    float x1 -> x1
    float y1 -> y1
    float x2 -> x2
    float y2 -> y2
    float thickness -> thickness
    java.awt.Color color -> color
    float getX1() -> getX1
    float getY1() -> getY1
    float getX2() -> getX2
    float getY2() -> getY2
    float getThickness() -> getThickness
    java.awt.Color getColor() -> getColor
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.Metadata -> com.adlitteram.pdftool.filters.Metadata:
    java.lang.String key -> key
    java.lang.String value -> value
    java.lang.String getKey() -> getKey
    java.lang.String getValue() -> getValue
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.adlitteram.pdftool.filters.Multiply -> com.adlitteram.pdftool.filters.Multiply:
    int count -> count
    java.io.File[] filter(java.io.File) -> filter
    java.io.File[] filter(java.io.File[]) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.PaddingPage -> com.adlitteram.pdftool.filters.PaddingPage:
    int FIRST_PAGE -> FIRST_PAGE
    int LAST_PAGE -> LAST_PAGE
    java.lang.String destination -> destination
    int insertBefore -> insertBefore
    int modulo -> modulo
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.PageMark -> com.adlitteram.pdftool.filters.PageMark:
    float x -> x
    float y -> y
    float size -> size
    float offset -> offset
    java.lang.String position -> position
    float thickness -> thickness
    java.awt.Color color -> color
    float getX() -> getX
    float getY() -> getY
    float getSize() -> getSize
    float getOffset() -> getOffset
    float getThickness() -> getThickness
    java.awt.Color getColor() -> getColor
    java.lang.String getPosition() -> getPosition
    void setPosition(java.lang.String) -> setPosition
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.PageSlot -> com.adlitteram.pdftool.filters.PageSlot:
    float x -> x
    float y -> y
    boolean folio -> folio
    float folioX -> folioX
    float folioY -> folioY
    java.lang.String folioText -> folioText
    int folioSize -> folioSize
    float getX() -> getX
    float getY() -> getY
    boolean isFolioted() -> isFolioted
    float getFolioX() -> getFolioX
    float getFolioY() -> getFolioY
    int getFontSize() -> getFontSize
    java.lang.String getFolioText() -> getFolioText
    java.lang.String getFolio(int,java.util.Map,java.io.File) -> getFolio
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.PdfFilter -> com.adlitteram.pdftool.filters.PdfFilter:
    java.io.File[] filter(java.io.File) -> filter
    java.io.File[] filter(java.io.File[]) -> filter
com.adlitteram.pdftool.filters.PdfTool -> com.adlitteram.pdftool.filters.PdfTool:
    java.util.ArrayList filters -> filters
    com.adlitteram.pdftool.filters.PdfTool createFromFile(java.io.File) -> createFromFile
    void saveToFile(java.io.File) -> saveToFile
    void reset() -> reset
    void addFilter(com.adlitteram.pdftool.filters.PdfFilter) -> addFilter
    boolean removeFilter(com.adlitteram.pdftool.filters.PdfFilter) -> removeFilter
    void execute(java.io.File) -> execute
    void execute(java.io.File[]) -> execute
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.RemovePage -> com.adlitteram.pdftool.filters.RemovePage:
    java.lang.String destination -> destination
    java.lang.String pattern -> pattern
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.Resize -> com.adlitteram.pdftool.filters.Resize:
    java.lang.String destination -> destination
    float width1 -> width1
    float height1 -> height1
    float width -> width
    float height -> height
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.ReversePage -> com.adlitteram.pdftool.filters.ReversePage:
    java.lang.String destination -> destination
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.SelectPage -> com.adlitteram.pdftool.filters.SelectPage:
    java.lang.String destination -> destination
    java.lang.String pattern -> pattern
    java.io.File[] filter(java.io.File) -> filter
    java.util.List getSelectedList(int) -> getSelectedList
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.SplitDocument -> com.adlitteram.pdftool.filters.SplitDocument:
    java.lang.String destination1 -> destination1
    java.lang.String destination2 -> destination2
    int pageBreak -> pageBreak
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.SplitPage -> com.adlitteram.pdftool.filters.SplitPage:
    java.lang.String destination -> destination
    int pageStep -> pageStep
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.Transform -> com.adlitteram.pdftool.filters.Transform:
    java.lang.String destination -> destination
    double scaleX -> scaleX
    double scaleY -> scaleY
    double rotation -> rotation
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.filters.WaterMark -> com.adlitteram.pdftool.filters.WaterMark:
    java.lang.String destination -> destination
    java.lang.String text -> text
    int fontSize -> fontSize
    double opacity -> opacity
    java.io.File[] filter(java.io.File) -> filter
    java.lang.String toString() -> toString
com.adlitteram.pdftool.utils.NumUtils -> com.adlitteram.pdftool.utils.NumUtils:
    float INtoPT -> INtoPT
    float PTtoIN -> PTtoIN
    float MMtoPT -> MMtoPT
    float PTtoMM -> PTtoMM
    float CMtoPT -> CMtoPT
    float PTtoCM -> PTtoCM
    int MM -> MM
    int CM -> CM
    int PT -> PT
    int IN -> IN
    float pointValue(java.lang.String) -> pointValue
    java.lang.String toUnit(float,int,int) -> toUnit
    java.lang.String roundDecimal(float,int) -> roundDecimal
    boolean booleanValue(java.lang.Object) -> booleanValue
    int intValue(java.lang.Object) -> intValue
    long longValue(java.lang.Object) -> longValue
    float floatValue(java.lang.Object) -> floatValue
    double doubleValue(java.lang.Object) -> doubleValue
    boolean booleanValue(java.lang.Object,boolean) -> booleanValue
    int intValue(java.lang.Object,int) -> intValue
    long longValue(java.lang.Object,long) -> longValue
    float floatValue(java.lang.Object,float) -> floatValue
    double doubleValue(java.lang.Object,double) -> doubleValue
    boolean isValidBoolean(java.lang.Object) -> isValidBoolean
    boolean isValidInt(java.lang.Object) -> isValidInt
    boolean isValidLong(java.lang.Object) -> isValidLong
    boolean isValidFloat(java.lang.Object) -> isValidFloat
    boolean isValidDouble(java.lang.Object) -> isValidDouble
    boolean isEven(int) -> isEven
    boolean isEven(long) -> isEven
    boolean isEven(double) -> isEven
    boolean isEven(float) -> isEven
    boolean isOdd(int) -> isOdd
    boolean isOdd(long) -> isOdd
    boolean isOdd(double) -> isOdd
    boolean isOdd(float) -> isOdd
    java.lang.String toByteSize(long) -> toByteSize
    int clamp(int,int,int) -> clamp
    int[] stringToIntArray(java.lang.String) -> stringToIntArray
    java.lang.String intArrayToString(int[]) -> intArrayToString
    float[] stringToFloatArray(java.lang.String) -> stringToFloatArray
    java.lang.String floatArrayToString(float[]) -> floatArrayToString
    double[] stringToDoubleArray(java.lang.String) -> stringToDoubleArray
    java.lang.String doubleArrayToString(double[]) -> doubleArrayToString
com.adlitteram.pdftool.xml.ColorConverter -> com.adlitteram.pdftool.xml.ColorConverter:
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.Object fromString(java.lang.String) -> fromString
    boolean canConvert(java.lang.Class) -> canConvert
com.adlitteram.pdftool.xml.PointConverter -> com.adlitteram.pdftool.xml.PointConverter:
    java.lang.String toString(java.lang.Object) -> toString
    java.lang.Object fromString(java.lang.String) -> fromString
    boolean canConvert(java.lang.Class) -> canConvert
com.adlitteram.pdftool.xml.XMLTools -> com.adlitteram.pdftool.xml.XMLTools:
    com.thoughtworks.xstream.XStream xstream -> xstream
    void encodeToFile(java.lang.Object,java.io.File) -> encodeToFile
    java.lang.Object decodeFromFile(java.io.File) -> decodeFromFile
